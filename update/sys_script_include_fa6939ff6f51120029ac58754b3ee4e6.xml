<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_donow.DoNowUtil</api_name>
        <client_callable>false</client_callable>
        <description>A collection of utilities to manage the DoNow logic</description>
        <name>DoNowUtil</name>
        <script><![CDATA[var DoNowUtil = Class.create();
DoNowUtil.prototype =Object.extendsObject(global.AbstractAjaxProcessor,
{
	re: /@("([^"]+)|(\w+))(?![^@]*@)/,
	contextFound: false,
	
	/*
	Description:
	Return:
 	*/
	getDefaultContextRecord : function(user) {
		gs.debug("Entering getDefaultContext, user=" +user);
		var gr = new GlideRecord("x_snc_donow_context");
		gr.addQuery("owner", user);
		gr.addQuery("my_default", true);
		gr.query();
		if (gr.next()) {
			gs.debug("In getDefaultContext, user =" +user+ " and value= "+gr.getValue('value') );
			return gr;
		}
		return null;
		
	},
	
	getDefaultContextValue : function(user) {
		var gr = this.getDefaultContextRecord(user);
		if (gr != null) {
			return gr.getValue('value');
		} else {
			return null;
		}
	},
	
	getDefaultContextID : function(user) {
		var gr = this.getDefaultContextRecord(user);
		if (gr != null) {
			return gr.getUniqueValue();
		} else {
			return null;
		}
	},
	
	getMyDefaultContextValue : function() {
		var userID = gs.getUserID();
		var context = this.getDefaultContextValue(gs.getUserID());
		gs.debug("In getMyDefaultContextValue, userID=" + userID + " context = " + context);
		return context;
		
	},
	
	getMyDefaultContextID : function() {
		var userID = gs.getUserID();
		var context = this.getDefaultContextID(gs.getUserID());
		gs.debug("In getMyDefaultContextID, userID=" + userID + " context = " + context);
		return context;
		
	},
	
	
	getGTDUser: function(emailAddress) {
		/* implementation suboptimal , fix later */
		gs.debug("Entering getGTDUers, emailAddress=" +emailAddress);
		var gr = new GlideRecord('x_snc_donow_email_token');
		gr.query();
		while (gr.next()){
			if (emailAddress.indexOf(gr.token) > -1) {
				gs.debug("In if of getGTDUers, emailAddress=" +emailAddress + " gr.user=" + gr.user +" gr.token =" + gr.token );
				
				return gr.getValue('user');
			}
		}
		
		return null;
	},
	
	hasGTDUser: function(emailAddress) {
		/* implementation suboptimal , fix later */
		gs.debug("Entering getGTDUers, emailAddress=" +emailAddress);
		var gr = new GlideRecord('x_snc_donow_email_token');
		gr.query();
		while (gr.next()){
			if (emailAddress.indexOf(gr.token) > -1) {
				gs.debug("In if of hasGTDUers, emailAddress=" +emailAddress + " gr.user=" + gr.user +" gr.token =" + gr.token );
				
				return true;
			}
		}
		
		return false;
	},
	
	findContext: function(contextName, user) {
		var gr = new GlideRecord("x_snc_donow_context");
		gr.addQuery("value", contextName);
		gr.addQuery("owner", user);
		gr.query();
		if (gr.next()) {
			gs.debug("In findContext, contextName =" +contextName+ " and value= "+gr.getValue('value') );
			return gr.getUniqueValue();
		}
		return null;
	},
	
	/*
 	*/
	parseContext: function(subject, user) {
		var contextID = null;
		var found = this.re.exec(subject);
		if (found) {
			var length = found.length;
			var quoted_context = found[length-2];
			var unquoted_context = found[length-1];
			var context = null;
			if (quoted_context != null) {
				context = quoted_context;
			} else if (unquoted_context != null) {
				context = unquoted_context;
			}
			// doing this to return null if there is no such context
			// with this string in DB, IE there is a twitter handle
			//but no real context in the subject
			contextID = this.findContext(context, user);
		}
		if (contextID == null) {
			contextID = this.getDefaultContextID(user);
			this.foundContext = false;
		} else {
			this.foundContext = true;
		}
		
		return contextID;
	},
	
	sanitizeSubject: function(subject) {
		var sanitized =  subject.replace("Fwd: ", "").replace("Re: ", "").replace("FW: ", "");
		if (this.foundContext) {
			sanitized = sanitized.replace(this.re, "");
		}
		return sanitized;
	},
	
	type: 'DoNowUtil'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-02-07 17:27:51</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fa6939ff6f51120029ac58754b3ee4e6</sys_id>
        <sys_mod_count>37</sys_mod_count>
        <sys_name>DoNowUtil</sys_name>
        <sys_package display_value="DoNow" source="x_snc_donow">bb8ba81b13d11600351d58a12244b0eb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="DoNow">bb8ba81b13d11600351d58a12244b0eb</sys_scope>
        <sys_update_name>sys_script_include_fa6939ff6f51120029ac58754b3ee4e6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-08-20 21:39:53</sys_updated_on>
    </sys_script_include>
</record_update>
